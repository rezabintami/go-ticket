swagger: "2.0"
info:
  version: 1.0.0
  title: Ticketing API

paths:
  #! Login
  /login:
    post:
      tags:
        - Login
      summary: login
      produces:
        - application/json
      parameters:
        - in: body
          name: Login
          schema:
            $ref: "#/definitions/Login"
      responses:
        201:
          description: login success
        400:
          description: login failed
        409:
          description: an existing item already exists
  #! Register
  /register:
    post:
      tags:
        - Register
      summary: register
      produces:
        - application/json
      parameters:
        - in: body
          name: Register
          schema:
            $ref: "#/definitions/Register"
      responses:
        201:
          description: register success
        400:
          description: register failed
        409:
          description: an existing item already exists
  #! TopUp
  /topup:
    post:
      tags:
        - Topup
      summary: topup
      produces:
        - application/json
      parameters:
        - in: body
          name: Topup
          schema:
            $ref: "#/definitions/TopUp"
      responses:
        201:
          description: topup success
        400:
          description: topup failed
        409:
          description: an existing item already exists
    #! History Topup
    get:
      tags:
        - History Topup
      summary: history topup
      responses:
        200:
          description: get all topup
          schema:
            type: array
            items:
              $ref: "#/definitions/HistoryTopup"
        400:
          description: bad input parameter
  #! Ticket
  /tickets:
    #! Get Ticket
    get:
      tags:
        - Get Ticket
      summary: get ticket
      responses:
        200:
          description: get ticket
          schema:
            type: array
            items:
              $ref: "#/definitions/Tickets"
        400:
          description: bad input parameter
    #! Create Ticket
    post:
      tags:
        - Create Ticket
      summary: create ticket
      produces:
        - application/json
      parameters:
        - in: body
          name: create ticket
          schema:
            $ref: "#/definitions/Tickets"
      responses:
        201:
          description: topup success
        400:
          description: topup failed
        409:
          description: an existing item already exists
    #! Delete Ticket
  /tickets/{ticket_id}:
    delete:
      tags:
        - Delete Ticket
      summary: delete ticket
      parameters:
        - in: path
          required: true
          name: "ticket_id"
          type: integer
      responses:
        200:
          description: delete success
        400:
          description: delete failed
  #! Get Search Movies
  /movies:
    get:
      tags:
        - Get Search Movies
      summary: get movies
      parameters:
        - name: search
          in: query
          description: insert keyword
          type: string
      responses:
        200:
          description: get movies
          schema:
            type: array
            items:
              $ref: "#/definitions/Movies"
        400:
          description: bad input parameter
  #! Get Detail Movies
  /movies/{movie_id}:
    get:
      tags:
        - Get Detail Movies
      summary: get detail movies
      parameters:
        - in: path
          required: true
          name: "movie_id"
          type: integer
      responses:
        200:
          description: get detail movies
          schema:
            $ref: "#/definitions/Movies"
        400:
          description: bad input parameter
  #! Get Theater
  /theater:
    get:
      tags:
        - Get Theater
      summary: get theater
      responses:
        200:
          description: get theater
          schema:
            type: array
            items:
              $ref: "#/definitions/Theater"
        400:
          description: bad input parameter
    #! Create Theater
    post:
      tags:
        - Create Theater
      summary: create theater
      produces:
        - application/json
      parameters:
        - in: body
          name: Topup
          schema:
            $ref: "#/definitions/CreateTheater"
      responses:
        200:
          description: create theater success
        400:
          description: create theater failed
    #! Update Theater
  /theater/{theater_id}:
    put:
      tags:
        - Update Theater
      summary: update theater
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Update Theater
          description: update theater
          schema:
            $ref: "#/definitions/UpdateTheater"
        - in: path
          required: true
          name: "theater_id"
          type: integer
      responses:
        201:
          description: item update
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists

  #! Profile
  /users:
    #! Get Profile
    get:
      tags:
        - Get Profile
      summary: get profile
      responses:
        200:
          description: get profile
          schema:
            type: array
            items:
              $ref: "#/definitions/GetProfile"
        400:
          description: bad input parameter
    #! Update Profile
    put:
      tags:
        - Update Profile
      summary: update profile
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Update Profile
          description: update profile
          schema:
            $ref: "#/definitions/Data"
      responses:
        201:
          description: item update
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
definitions:
  GetProfile:
    type: object
    required:
      - meta
      - data
    properties:
      meta:
        $ref: "#/definitions/Meta"
      data:
        $ref: "#/definitions/Data"
  Data:
    properties:
      id:
        type: integer
        example: 1
      name:
        type: string
        example: reza
      email:
        type: string
        example: reza@gmail.com
      balance:
        type: number
        example: 120000.00
      language:
        type: string
        example: in
  Meta:
    properties:
      error_message:
        type: string
        example: Need Login First
  Login:
    properties:
      email:
        type: string
        example: reza@gmail.com
      password:
        type: string
        example: sh8hs82ldao21d
  Register:
    properties:
      name:
        type: string
        example: reza
      email:
        type: string
        example: reza@gmail.com
      balance:
        type: number
        example: 0.00
      language:
        type: string
        example: in
  TopUp:
    properties:
      user_id:
        type: number
        example: 1
      balance:
        type: number
        example: 120000

  Tickets:
    properties:
      booking_code:
        type: string
        example: ABC123
      movie_id:
        type: integer
        example: 2386
      user_id:
        type: integer
        example: 2
      theater_id:
        type: integer
        example: 2
      seats:
        type: string
        example: A8
      price:
        type: number
        example: 120000.00
      time:
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z

  Movies:
    properties:
      id:
        type: integer
        example: 231
      original_title:
        type: string
        example: Jungle Cruise
      original_language:
        type: string
        example: en
      overview:
        type: string
        example: Dr. Lily Houghton enlists the aid of wisecracking skipper Frank Wolff to take her down the Amazon in his dilapidated boat. Together, they search for an ancient tree that holds the power to heal â€“ a discovery that will change the future of medicine.
      poster_path:
        type: string
        example: /9dKCd55IuTT5QRs989m9Qlb7d2B.jpg
      vote_average:
        type: number
        example: 8.1
      vote_count:
        type: integer
        example: 1048

  HistoryTopup:
    properties:
      id:
        type: integer
        example: 231
      user_id:
        type: integer
        example: 1
      name:
        type: string
        example: Gopay
      balance:
        type: number
        example: 50000

  Theater:
    properties:
      id:
        type: integer
        example: 23
      name:
        type: string
        example: CGV Surabaya
      place:
        type: string
        example: Surabaya
  CreateTheater:
    properties:
      name:
        type: string
        example: CGV Surabaya
      place:
        type: string
        example: Surabaya
  UpdateTheater:
    properties:
      name:
        type: string
        example: CGV Surabaya
      place:
        type: string
        example: Surabaya
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /rezabintami/ticketing/1.0.0
schemes:
  - https
