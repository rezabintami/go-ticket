// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	movies "ticketing/business/movies"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: ctx, urlsearch, search
func (_m *Usecase) Fetch(ctx context.Context, urlsearch string, search string) ([]movies.Domain, error) {
	ret := _m.Called(ctx, urlsearch, search)

	var r0 []movies.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []movies.Domain); ok {
		r0 = rf(ctx, urlsearch, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]movies.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, urlsearch, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *Usecase) GetByID(ctx context.Context, id int) (movies.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 movies.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) movies.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(movies.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
